package com.example.backendoan.Service;

import com.example.backendoan.Entity.ChiTietDonDatXe;
import com.example.backendoan.Entity.DonDatXe;
import com.example.backendoan.Entity.KhachHang;
import com.example.backendoan.Entity.Xe;
import com.example.backendoan.Enums.TrangThaiDonDatXe;
import com.example.backendoan.Enums.TrangThaiXe;
import com.example.backendoan.Repository.ChiTietDonDatXeRepository;
import com.example.backendoan.Repository.DonDatXeRepository;
import com.example.backendoan.Repository.KhachHangRepository;
import com.example.backendoan.Repository.XeRepository;
import jakarta.transaction.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Component
public class XeStatusScheduler {

    private static final Logger logger = LoggerFactory.getLogger(XeStatusScheduler.class);
    @Autowired
    private  DonDatXeRepository donDatXeRepository;
    @Autowired
    private  KhachHangRepository khachHangRepository;
    @Autowired
    private  MailService mailService;

    // Ch·∫°y v√†o 8h s√°ng h√†ng ng√†y
    @Scheduled(cron = "0 0 8 * * ?")
    public void checkOverdueRentals() {
        logger.info("B·∫Øt ƒë·∫ßu ki·ªÉm tra c√°c ƒë∆°n ƒë·∫∑t xe qu√° h·∫°n l√∫c: {}", LocalDateTime.now());

        try {
            // L·∫•y t·∫•t c·∫£ ƒë∆°n ƒë·∫∑t xe c√≥ tr·∫°ng th√°i DANG_THUE (4)
            List<DonDatXe> dangThueOrders = donDatXeRepository.findByTrangThai(4);
            LocalDateTime now = LocalDateTime.now();
            int overdueCount = 0;
            int reminderCount = 0;

            for (DonDatXe donDatXe : dangThueOrders) {
                LocalDateTime ngayKetThuc = donDatXe.getNgayKetThuc();

                if (ngayKetThuc != null && ngayKetThuc.isBefore(now)) {
                    // ƒê∆°n ƒë√£ qu√° h·∫°n
                    sendOverdueEmail(donDatXe, now);
                    overdueCount++;
                } else if (ngayKetThuc != null &&
                        ngayKetThuc.isAfter(now) &&
                        ngayKetThuc.isBefore(now.plusHours(24))) {
                    // ƒê∆°n s·∫Øp h·∫øt h·∫°n trong 24h t·ªõi
                    sendReminderEmail(donDatXe, ngayKetThuc);
                    reminderCount++;
                }
            }
            logger.info("Ho√†n th√†nh ki·ªÉm tra: {} ƒë∆°n qu√° h·∫°n, {} ƒë∆°n s·∫Øp h·∫øt h·∫°n", overdueCount, reminderCount);

        } catch (Exception e) {
            logger.error("L·ªói khi ki·ªÉm tra ƒë∆°n ƒë·∫∑t xe qu√° h·∫°n: {}", e.getMessage(), e);
        }
    }
    // G·ª≠i email cho ƒë∆°n qu√° h·∫°n
    private void sendOverdueEmail(DonDatXe donDatXe, LocalDateTime currentTime) {
        try {
            KhachHang khachHang = khachHangRepository.findById(donDatXe.getKhachHangId())
                    .orElse(null);

            if (khachHang == null || khachHang.getEmail() == null) {
                logger.warn("Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°ch h√†ng ho·∫∑c email cho ƒë∆°n: {}", donDatXe.getDonDatXeId());
                return;
            }

            String subject = "‚ö†Ô∏è KH·∫®N C·∫§P - ƒê∆°n thu√™ xe ƒë√£ qu√° h·∫°n #" + donDatXe.getDonDatXeId();

            long overdueDays = java.time.Duration.between(donDatXe.getNgayKetThuc(), currentTime).toDays();

            String body = String.format(
                    "K√≠nh g·ª≠i anh/ch·ªã %s,\n\n" +
                            "‚ö†Ô∏è ƒê∆†N THU√ä XE C·ª¶A B·∫†N ƒê√É QU√Å H·∫†N ‚ö†Ô∏è\n\n" +
                            "üìã Th√¥ng tin ƒë∆°n thu√™:\n" +
                            "‚Ä¢ M√£ ƒë∆°n: #%s\n" +
                            "‚Ä¢ Ng√†y h·∫øt h·∫°n: %s\n" +
                            "‚Ä¢ S·ªë ng√†y qu√° h·∫°n: %d ng√†y\n" +
                            "‚Ä¢ T·ªïng ti·ªÅn ƒë∆°n: %s VNƒê\n\n" +
                            "üö® VUI L√íNG TR·∫¢ XE NGAY L·∫¨P T·ª®C ƒë·ªÉ tr√°nh ph√°t sinh th√™m chi ph√≠ ph·∫°t.\n\n" +
                            "üìû Li√™n h·ªá ngay hotline: 0948.310.103\n" +
                            "üìß Email h·ªó tr·ª£: MotoVip2003@gmail.com\n" +
                            "üìç ƒê·ªãa ch·ªâ tr·∫£ xe: %s\n\n" +
                            "Tr√¢n tr·ªçng,\n" +
                            "ƒê·ªôi ng≈© MotoVip",
                    khachHang.getHoTen(),
                    donDatXe.getDonDatXeId(),
                    donDatXe.getNgayKetThuc().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")),
                    overdueDays,
                    donDatXe.getTongTien().toString(),
                    donDatXe.getDiaDiemNhanXe()
            );

            mailService.sendBookingConfirmationEmail(khachHang.getEmail(), subject, body);
            logger.info("ƒê√£ g·ª≠i email qu√° h·∫°n cho ƒë∆°n: {} - Email: {}", donDatXe.getDonDatXeId(), khachHang.getEmail());

        } catch (Exception e) {
            logger.error("L·ªói khi g·ª≠i email qu√° h·∫°n cho ƒë∆°n {}: {}", donDatXe.getDonDatXeId(), e.getMessage());
        }
    }
    // G·ª≠i email nh·∫Øc nh·ªü s·∫Øp h·∫øt h·∫°n
    private void sendReminderEmail(DonDatXe donDatXe, LocalDateTime ngayKetThuc) {
        try {
            KhachHang khachHang = khachHangRepository.findById(donDatXe.getKhachHangId())
                    .orElse(null);

            if (khachHang == null || khachHang.getEmail() == null) {
                return;
            }

            String subject = "üîî Nh·∫Øc nh·ªü tr·∫£ xe - ƒê∆°n #" + donDatXe.getDonDatXeId() + " s·∫Øp h·∫øt h·∫°n";

            long hoursLeft = java.time.Duration.between(LocalDateTime.now(), ngayKetThuc).toHours();

            String body = String.format(
                    "K√≠nh g·ª≠i anh/ch·ªã %s,\n\n" +
                            "üîî NH·∫ÆC NH·ªû TR·∫¢ XE\n\n" +
                            "üìã Th√¥ng tin ƒë∆°n thu√™:\n" +
                            "‚Ä¢ M√£ ƒë∆°n: #%s\n" +
                            "‚Ä¢ Th·ªùi h·∫°n tr·∫£ xe: %s\n" +
                            "‚Ä¢ Th·ªùi gian c√≤n l·∫°i: %d gi·ªù\n" +
                            "‚Ä¢ T·ªïng ti·ªÅn ƒë∆°n: %s VNƒê\n\n" +
                            "üìç ƒê·ªãa ƒëi·ªÉm tr·∫£ xe: %s\n\n" +
                            "üí° L∆∞u √Ω: Vui l√≤ng tr·∫£ xe ƒë√∫ng gi·ªù ƒë·ªÉ tr√°nh ph√°t sinh ph√≠ ph·∫°t.\n\n" +
                            "üìû H·ªó tr·ª£: 0948.310.103\n" +
                            "üìß Email: MotoVip2003@gmail.com\n\n" +
                            "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!\n\n" +
                            "Tr√¢n tr·ªçng,\n" +
                            "ƒê·ªôi ng≈© MotoVip",
                    khachHang.getHoTen(),
                    donDatXe.getDonDatXeId(),
                    ngayKetThuc.format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")),
                    hoursLeft,
                    donDatXe.getTongTien().toString(),
                    donDatXe.getDiaDiemNhanXe()
            );

            mailService.sendBookingConfirmationEmail(khachHang.getEmail(), subject, body);
            logger.info("ƒê√£ g·ª≠i email nh·∫Øc nh·ªü cho ƒë∆°n: {} - Email: {}", donDatXe.getDonDatXeId(), khachHang.getEmail());

        } catch (Exception e) {
            logger.error("L·ªói khi g·ª≠i email nh·∫Øc nh·ªü cho ƒë∆°n {}: {}", donDatXe.getDonDatXeId(), e.getMessage());
        }
    }
    // Method ƒë·ªÉ test th·ªß c√¥ng (optional)
    public void manualCheckOverdueRentals() {
        logger.info("Ki·ªÉm tra th·ªß c√¥ng c√°c ƒë∆°n ƒë·∫∑t xe qu√° h·∫°n");
        checkOverdueRentals();
    }

}